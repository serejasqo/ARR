import os
import logging
import io
import matplotlib.pyplot as plt
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import URLInputFile

# ========================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –î–õ–Ø DEPLOY –ù–ê RENDER.COM
# ========================================================

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Render
BOT_TOKEN = os.getenv('TELEGRAM_TOKEN')
if not BOT_TOKEN:
    logging.critical("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    logging.critical("–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Render: Environment Variables")
    exit(1)

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
AR_COST = 500000  # –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–Ω–µ–¥—Ä–µ–Ω–∏—è AR
PORT = int(os.environ.get('PORT', 5000))  # –î–ª—è webhook (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)

# ========================================================
# –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê
# ========================================================

# –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
CATEGORY_COEFFS = {
    "–æ–¥–µ–∂–¥–∞": {"conversion_increase": 0.25, "return_reduction": 0.35, "icon": "üëï"},
    "–º–µ–±–µ–ª—å": {"conversion_increase": 0.15, "return_reduction": 0.25, "icon": "üõãÔ∏è"},
    "—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞": {"conversion_increase": 0.20, "return_reduction": 0.15, "icon": "üì±"},
    "–∫–æ—Å–º–µ—Ç–∏–∫–∞": {"conversion_increase": 0.30, "return_reduction": 0.40, "icon": "üíÑ"},
    "–¥—Ä—É–≥–æ–µ": {"conversion_increase": 0.18, "return_reduction": 0.20, "icon": "üì¶"}
}

class CalcStates(StatesGroup):
    AVERAGE_CHECK = State()
    MONTHLY_ORDERS = State()
    CONVERSION = State()
    RETURN_RATE = State()
    PRODUCT_CATEGORY = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# ========================================================
# –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
# ========================================================

@dp.message(F.text == "/start")
async def start_cmd(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AR-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –æ—Ç Arigami. –ü–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å, "
        "—Å–∫–æ–ª—å–∫–æ –≤—ã —Å—ç–∫–æ–Ω–æ–º–∏—Ç–µ —Å –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é.\n\n"
        "–î–∞–≤–∞–π—Ç–µ –∑–∞ 2 –º–∏–Ω—É—Ç—ã –æ—Ü–µ–Ω–∏–º –≤–∞—à –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª!\n"
        "‚û°Ô∏è –£–∫–∞–∂–∏—Ç–µ *—Å—Ä–µ–¥–Ω–∏–π —á–µ–∫* –∑–∞–∫–∞–∑–∞ –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 8500):",
        parse_mode="Markdown"
    )
    await state.set_state(CalcStates.AVERAGE_CHECK)

@dp.message(CalcStates.AVERAGE_CHECK)
async def process_average_check(message: types.Message, state: FSMContext):
    try:
        value = float(message.text.replace(",", "."))
        if value <= 0:
            raise ValueError
        await state.update_data(average_check=value)
        await message.answer(
            "‚úì –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ *–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –≤ –º–µ—Å—è—Ü*:",
            parse_mode="Markdown"
        )
        await state.set_state(CalcStates.MONTHLY_ORDERS)
    except:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 4500)")

@dp.message(CalcStates.MONTHLY_ORDERS)
async def process_monthly_orders(message: types.Message, state: FSMContext):
    try:
        value = int(message.text)
        if value <= 0:
            raise ValueError
        await state.update_data(monthly_orders=value)
        
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
            text="‚ùì –ù–µ –∑–Ω–∞—é —Ç–æ—á–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å",
            callback_data="conversion_unknown"
        ))
        
        await message.answer(
            "üìä –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ *—Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏* –≤ –ø–æ–∫—É–ø–∫–∏:\n"
            "(–ù–∞–ø—Ä–∏–º–µ—Ä: 2.5 –∏–ª–∏ 3%)",
            parse_mode="Markdown",
            reply_markup=builder.as_markup()
        )
        await state.set_state(CalcStates.CONVERSION)

@dp.callback_query(F.data == "conversion_unknown")
async def unknown_conversion(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(conversion=2.0)
    await callback.message.answer(
        "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ 2% (—Å—Ä–µ–¥–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å).\n\n"
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ *–ø—Ä–æ—Ü–µ–Ω—Ç –≤–æ–∑–≤—Ä–∞—Ç–æ–≤* —Ç–æ–≤–∞—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15%):",
        parse_mode="Markdown"
    )
    await state.set_state(CalcStates.RETURN_RATE)
    await callback.answer()

@dp.message(CalcStates.CONVERSION)
async def process_conversion(message: types.Message, state: FSMContext):
    try:
        value = float(message.text.replace("%", "").replace(",", "."))
        if not 0.1 <= value <= 100:
            raise ValueError
        await state.update_data(conversion=value)
        await message.answer(
            "üîÑ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ *–ø—Ä–æ—Ü–µ–Ω—Ç –≤–æ–∑–≤—Ä–∞—Ç–æ–≤* —Ç–æ–≤–∞—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15%):",
            parse_mode="Markdown"
        )
        await state.set_state(CalcStates.RETURN_RATE)
    except:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 3.4)")

@dp.message(CalcStates.RETURN_RATE)
async def process_return_rate(message: types.Message, state: FSMContext):
    try:
        value = float(message.text.replace("%", "").replace(",", "."))
        if not 1 <= value <= 100:
            raise ValueError
        
        await state.update_data(return_rate=value)
        
        builder = InlineKeyboardBuilder()
        for category, params in CATEGORY_COEFFS.items():
            builder.add(types.InlineKeyboardButton(
                text=f"{params['icon']} {category.capitalize()}",
                callback_data=f"category_{category}"
            ))
        builder.adjust(2)
        
        await message.answer(
            "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ *–∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤*:",
            parse_mode="Markdown",
            reply_markup=builder.as_markup()
        )
        await state.set_state(CalcStates.PRODUCT_CATEGORY)
    except:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15)")

@dp.callback_query(F.data.startswith("category_"))
async def process_category(callback: types.CallbackQuery, state: FSMContext):
    category = callback.data.split("_")[1]
    await state.update_data(product_category=category)
    data = await state.get_data()
    
    # –†–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results = calculate_roi(data)
    report_text = format_report(results, data)
    chart = generate_roi_chart(results)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    await callback.message.answer_photo(
        photo=types.BufferedInputFile(chart.getvalue(), filename="roi_chart.png"),
        caption=report_text,
        parse_mode="Markdown"
    )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="üì• –°–∫–∞—á–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç",
            callback_data="get_full_report"
        )
    )
    builder.row(
        types.InlineKeyboardButton(
            text="üí¨ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
            url="https://arigami.io/contact"
        ),
        types.InlineKeyboardButton(
            text="üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç",
            callback_data="new_calculation"
        )
    )
    
    await callback.message.answer(
        "–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –æ–±—Å—É–¥–∏—Ç—å –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ AR?",
        reply_markup=builder.as_markup()
    )
    await state.clear()
    await callback.answer()

@dp.callback_query(F.data == "new_calculation")
async def new_calculation(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("üîÅ –ù–∞—á–Ω–µ–º –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç!")
    await start_cmd(callback.message, state)

# ========================================================
# –§–£–ù–ö–¶–ò–ò –†–ê–°–ß–ï–¢–ê –ò –û–¢–ß–ï–¢–ù–û–°–¢–ò
# ========================================================

def calculate_roi(data):
    coeffs = CATEGORY_COEFFS[data['product_category']]
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    additional_orders = data['monthly_orders'] * (data['conversion'] / 100) * coeffs['conversion_increase']
    additional_revenue = additional_orders * data['average_check'] * 12
    
    # –≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞—Ö
    returns_reduction = data['monthly_orders'] * (data['return_rate'] / 100) * coeffs['return_reduction']
    savings_on_returns = returns_reduction * data['average_check'] * 12
    
    # –û–±—â–∞—è –≤—ã–≥–æ–¥–∞
    total_benefit = additional_revenue + savings_on_returns
    
    # ROI —Ä–∞—Å—á–µ—Ç
    roi_percent = ((total_benefit - AR_COST) / AR_COST) * 100
    payback_months = AR_COST / (total_benefit / 12) if total_benefit > 0 else 999
    
    return {
        "additional_revenue": additional_revenue,
        "savings_on_returns": savings_on_returns,
        "total_benefit": total_benefit,
        "ar_cost": AR_COST,
        "roi_percent": roi_percent,
        "payback_months": payback_months,
        "category": data['product_category']
    }

def format_report(results, data):
    category_icon = CATEGORY_COEFFS[results['category']]['icon']
    category_name = results['category'].capitalize()
    
    report = (
        f"{category_icon} *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è {category_name}*\n\n"
        f"üîç –ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö:\n"
        f"- –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {data['average_check']:,.0f} ‚ÇΩ\n"
        f"- –ó–∞–∫–∞–∑–æ–≤/–º–µ—Å: {data['monthly_orders']}\n"
        f"- –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {data['conversion']}%\n"
        f"- –í–æ–∑–≤—Ä–∞—Ç—ã: {data['return_rate']}%\n\n"
        f"üí∏ *–ì–æ–¥–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—è —Å AR:*\n"
        f"‚ñ∏ –î–æ–ø. –¥–æ—Ö–æ–¥: +{results['additional_revenue']:,.0f} ‚ÇΩ\n"
        f"‚ñ∏ –≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞—Ö: +{results['savings_on_returns']:,.0f} ‚ÇΩ\n"
        f"‚ñ∏ –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ AR: -{results['ar_cost']:,.0f} ‚ÇΩ\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üíµ *–ß–∏—Å—Ç–∞—è –≤—ã–≥–æ–¥–∞: {results['total_benefit'] - results['ar_cost']:,.0f} ‚ÇΩ*\n\n"
        f"üìä ROI: *{results['roi_percent']:.1f}%*\n"
        f"‚è± –û–∫—É–ø–∞–µ–º–æ—Å—Ç—å: *{results['payback_months']:.1f} –º–µ—Å.*\n\n"
        f"_–†–∞—Å—á–µ—Ç—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–µ–π—Å–∞—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ Arigami_"
    )
    
    return report

def generate_roi_chart(results):
    plt.style.use('seaborn-v0_8-darkgrid')
    
    labels = ['–î–æ–ø. –¥–æ—Ö–æ–¥', '–≠–∫–æ–Ω–æ–º–∏—è', '–ó–∞—Ç—Ä–∞—Ç—ã']
    values = [
        results['additional_revenue'],
        results['savings_on_returns'],
        results['ar_cost']
    ]
    
    fig, ax = plt.subplots(figsize=(10, 6))
    bars = ax.bar(labels, values, color=['#4CAF50', '#2196F3', '#FF9800'])
    
    ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–∫–æ–Ω–æ–º–∏–∏ (–≥–æ–¥)', fontsize=14, pad=20)
    ax.set_ylabel('–†—É–±–ª–∏', fontsize=12)
    ax.grid(axis='y', linestyle='--', alpha=0.7)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for bar in bars:
        height = bar.get_height()
        ax.annotate(f'{height:,.0f} ‚ÇΩ',
                    xy=(bar.get_x() + bar.get_width() / 2, height),
                    xytext=(0, 3),
                    textcoords="offset points",
                    ha='center', va='bottom', fontsize=9)
    
    buf = io.BytesIO()
    plt.savefig(buf, format='png', dpi=120, bbox_inches='tight')
    buf.seek(0)
    plt.close()
    return buf

@dp.callback_query(F.data == "get_full_report")
async def send_full_report(callback: types.CallbackQuery):
    # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
    report_image = URLInputFile("https://arigami.io/images/ar-roi-report-sample.png")
    
    await callback.message.answer_photo(
        photo=report_image,
        caption="üìä –í–æ—Ç –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç. "
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –Ω–∞ —Å–∞–π—Ç–µ üëá",
        reply_markup=InlineKeyboardBuilder().add(
            types.InlineKeyboardButton(
                text="üöÄ –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –Ω–∞ –ø–æ—á—Ç—É",
                url="https://arigami.io/roi-report"
            )
        ).as_markup()
    )
    await callback.answer()

# ========================================================
# –ó–ê–ü–£–°–ö –ë–û–¢–ê –î–õ–Ø DEPLOY –ù–ê RENDER
# ========================================================

if __name__ == "__main__":
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    )
    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    logging.info(f"üÜî ID –±–æ—Ç–∞: {bot.id}")
    
    # –î–ª—è Render.com - –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
    dp.run_polling(bot)
